warning: type `res::ResponseError` is more private than the item `res::HttpResponse::write`
   --> src/res/mod.rs:638:5
    |
638 | /     pub fn write<S, E>(mut self, stream: S) -> Self
639 | |     where
640 | |         S: Stream<Item = Result<Bytes, E>> + Send + 'static,
641 | |         E: Into<ResponseError> + Send + 'static,
    | |________________________________________________^ method `res::HttpResponse::write` is reachable at visibility `pub`
    |
note: but type `res::ResponseError` is only usable at visibility `pub(crate)`
   --> src/res/mod.rs:13:1
    |
13  | pub(crate) enum ResponseError {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: `#[warn(private_bounds)]` on by default

warning: variant `Other` is never constructed
  --> src/res/mod.rs:15:5
   |
13 | pub(crate) enum ResponseError {
   |                 ------------- variant in this enum
14 |     IoError(std::io::Error),
15 |     Other(String),
   |     ^^^^^
   |
   = note: `ResponseError` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis
   = note: `#[warn(dead_code)]` on by default

warning: missing documentation for a module
 --> src/lib.rs:1:1
  |
1 | pub mod app;
  | ^^^^^^^^^^^
  |
note: the lint level is defined here
 --> src/app/mod.rs:1:9
  |
1 | #![warn(missing_docs)]
  |         ^^^^^^^^^^^^

warning: missing documentation for a module
 --> src/lib.rs:2:1
  |
2 | pub mod req;
  | ^^^^^^^^^^^
  |
note: the lint level is defined here
 --> src/req/mod.rs:1:9
  |
1 | #![warn(missing_docs)]
  |         ^^^^^^^^^^^^

warning: missing documentation for a module
 --> src/lib.rs:3:1
  |
3 | pub mod res;
  | ^^^^^^^^^^^
  |
note: the lint level is defined here
 --> src/res/mod.rs:1:9
  |
1 | #![warn(missing_docs)]
  |         ^^^^^^^^^^^^

warning: missing documentation for a module
 --> src/middlewares/mod.rs:1:1
  |
1 | pub mod cors;
  | ^^^^^^^^^^^^
  |
note: the lint level is defined here
 --> src/middlewares/cors.rs:1:9
  |
1 | #![warn(missing_docs)]
  |         ^^^^^^^^^^^^

warning: missing documentation for a module
 --> src/middlewares/mod.rs:2:1
  |
2 | pub mod logger;
  | ^^^^^^^^^^^^^^
  |
note: the lint level is defined here
 --> src/middlewares/logger.rs:1:9
  |
1 | #![warn(missing_docs)]
  |         ^^^^^^^^^^^^

warning: `ripress` (lib) generated 7 warnings
   Compiling ripress v0.6.0 (/Users/guru/Developer/rust/ripress-again)
warning: unused variable: `req`
   --> src/main.rs:280:23
    |
280 | async fn created_test(req: HttpRequest, res: HttpResponse) -> HttpResponse {
    |                       ^^^ help: if this is intentional, prefix it with an underscore: `_req`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `req`
   --> src/main.rs:286:29
    |
286 | async fn custom_status_test(req: HttpRequest, res: HttpResponse) -> HttpResponse {
    |                             ^^^ help: if this is intentional, prefix it with an underscore: `_req`

warning: unused variable: `req`
   --> src/main.rs:292:24
    |
292 | async fn redirect_test(req: HttpRequest, res: HttpResponse) -> HttpResponse {
    |                        ^^^ help: if this is intentional, prefix it with an underscore: `_req`

warning: unused variable: `req`
   --> src/main.rs:296:34
    |
296 | async fn permanent_redirect_test(req: HttpRequest, res: HttpResponse) -> HttpResponse {
    |                                  ^^^ help: if this is intentional, prefix it with an underscore: `_req`

warning: unused variable: `req`
   --> src/main.rs:305:22
    |
305 | async fn stream_text(req: HttpRequest, res: HttpResponse) -> HttpResponse {
    |                      ^^^ help: if this is intentional, prefix it with an underscore: `_req`

warning: unused variable: `req`
   --> src/main.rs:321:22
    |
321 | async fn stream_json(req: HttpRequest, res: HttpResponse) -> HttpResponse {
    |                      ^^^ help: if this is intentional, prefix it with an underscore: `_req`

warning: `ripress` (bin "ripress") generated 6 warnings
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.74s
     Running `/Users/guru/Developer/rust/ripress-again/target/debug/ripress`
Server is running on port 8080
